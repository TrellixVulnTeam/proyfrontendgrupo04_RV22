(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('chart.js'), require('rxjs'), require('rxjs/operators'), require('lodash-es')) :
    typeof define === 'function' && define.amd ? define('ng2-charts', ['exports', '@angular/core', 'chart.js', 'rxjs', 'rxjs/operators', 'lodash-es'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ng2-charts"] = {}, global.ng.core, global.chart_js, global.rxjs, global.rxjs.operators, global._));
})(this, (function (exports, i0, chart_js, rxjs, operators, lodashEs) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var ThemeService = /** @class */ (function () {
        function ThemeService() {
            this.colorschemesOptions = new rxjs.BehaviorSubject(undefined);
        }
        ThemeService.prototype.setColorschemesOptions = function (options) {
            this.pColorschemesOptions = options;
            this.colorschemesOptions.next(options);
        };
        ThemeService.prototype.getColorschemesOptions = function () {
            return this.pColorschemesOptions;
        };
        return ThemeService;
    }());
    ThemeService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(); }, token: ThemeService, providedIn: "root" });
    ThemeService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ThemeService.ctorParameters = function () { return []; };

    var BaseChartDirective = /** @class */ (function () {
        function BaseChartDirective(element, zone, themeService) {
            var _this = this;
            this.element = element;
            this.zone = zone;
            this.themeService = themeService;
            this.type = 'bar';
            this.plugins = [];
            this.chartClick = new i0.EventEmitter();
            this.chartHover = new i0.EventEmitter();
            this.subs = [];
            this.ctx = element.nativeElement.getContext('2d');
            this.subs.push(this.themeService.colorschemesOptions
                .pipe(operators.distinctUntilChanged())
                .subscribe(function (r) { return _this.themeChanged(r); }));
        }
        BaseChartDirective.prototype.ngOnChanges = function (changes) {
            var requireRender = ['type'];
            var propertyNames = Object.getOwnPropertyNames(changes);
            if (propertyNames.some(function (key) { return requireRender.includes(key); }) ||
                propertyNames.every(function (key) { return changes[key].isFirstChange(); })) {
                this.render();
            }
            else {
                var config = this.getChartConfiguration();
                if (this.chart) {
                    Object.assign(this.chart.config.data, config.data);
                    Object.assign(this.chart.config.plugins, config.plugins);
                    Object.assign(this.chart.config.options, config.options);
                }
                this.update();
            }
        };
        BaseChartDirective.prototype.ngOnDestroy = function () {
            if (this.chart) {
                this.chart.destroy();
                this.chart = void 0;
            }
            this.subs.forEach(function (s) { return s.unsubscribe(); });
        };
        BaseChartDirective.prototype.render = function () {
            var _this = this;
            if (this.chart) {
                this.chart.destroy();
            }
            return this.zone.runOutsideAngular(function () { return _this.chart = new chart_js.Chart(_this.ctx, _this.getChartConfiguration()); });
        };
        BaseChartDirective.prototype.update = function (duration) {
            var _this = this;
            if (this.chart) {
                this.zone.runOutsideAngular(function () { var _a; return (_a = _this.chart) === null || _a === void 0 ? void 0 : _a.update(duration); });
            }
        };
        BaseChartDirective.prototype.hideDataset = function (index, hidden) {
            if (this.chart) {
                this.chart.getDatasetMeta(index).hidden = hidden;
                this.update();
            }
        };
        BaseChartDirective.prototype.isDatasetHidden = function (index) {
            var _a, _b;
            return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;
        };
        BaseChartDirective.prototype.toBase64Image = function () {
            var _a;
            return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();
        };
        BaseChartDirective.prototype.themeChanged = function (options) {
            this.themeOverrides = options;
            if (this.chart) {
                Object.assign(this.chart.config.options, this.getChartOptions());
                this.update();
            }
        };
        BaseChartDirective.prototype.getChartOptions = function () {
            var _this = this;
            return lodashEs.merge({
                onHover: function (event, active) {
                    if (active && !active.length) {
                        return;
                    }
                    _this.chartHover.emit({ event: event, active: active });
                },
                onClick: function (event, active) {
                    _this.chartClick.emit({ event: event, active: active });
                }
            }, this.themeOverrides, this.options, {
                plugins: {
                    legend: {
                        display: this.legend
                    }
                }
            });
        };
        BaseChartDirective.prototype.getChartConfiguration = function () {
            return {
                type: this.type,
                data: this.getChartData(),
                plugins: this.plugins,
                options: this.getChartOptions()
            };
        };
        BaseChartDirective.prototype.getChartData = function () {
            return this.data ? this.data : {
                labels: this.labels || [],
                datasets: this.datasets || []
            };
        };
        return BaseChartDirective;
    }());
    BaseChartDirective.decorators = [
        { type: i0.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'canvas[baseChart]',
                    exportAs: 'base-chart'
                },] }
    ];
    BaseChartDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: ThemeService }
    ]; };
    BaseChartDirective.propDecorators = {
        type: [{ type: i0.Input }],
        legend: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        plugins: [{ type: i0.Input }],
        labels: [{ type: i0.Input }],
        datasets: [{ type: i0.Input }],
        chartClick: [{ type: i0.Output }],
        chartHover: [{ type: i0.Output }]
    };

    var baseColors = [
        [255, 99, 132],
        [54, 162, 235],
        [255, 206, 86],
        [231, 233, 237],
        [75, 192, 192],
        [151, 187, 205],
        [220, 220, 220],
        [247, 70, 74],
        [70, 191, 189],
        [253, 180, 92],
        [148, 159, 177],
        [77, 83, 96]
    ];

    var ɵ0 = function (context) { return rgba(generateColor(context.datasetIndex), 0.4); }, ɵ1 = function (context) { return rgba(generateColor(context.datasetIndex), 1); }, ɵ2 = function (context) { return rgba(generateColor(context.datasetIndex), 1); }, ɵ3 = function (context) { return rgba(generateColor(context.datasetIndex), 0.8); }, ɵ4 = function (context) { return rgba(generateColor(context.datasetIndex), 0.6); }, ɵ5 = function (context) { return rgba(generateColor(context.datasetIndex), 1); }, ɵ6 = function (context) { return rgba(generateColor(context.datasetIndex), 0.8); }, ɵ7 = function (context) { return rgba(generateColor(context.datasetIndex), 1); }, ɵ8 = function (context) { return rgba(generateColor(context.dataIndex), 0.6); }, ɵ9 = function (context) { return rgba(generateColor(context.dataIndex), 1); }, ɵ10 = function (context) { return rgba(generateColor(context.dataIndex), 1); }, ɵ11 = function (context) { return rgba(generateColor(context.dataIndex), 0.6); }, ɵ12 = function (context) { return rgba(generateColor(context.dataIndex), 1); }, ɵ13 = function (context) { return rgba(generateColor(context.dataIndex), 0.8); }, ɵ14 = function (context) { return rgba(generateColor(context.dataIndex), 1); };
    var builtInDefaults = {
        datasets: {
            line: {
                backgroundColor: ɵ0,
                borderColor: ɵ1,
                pointBackgroundColor: ɵ2,
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: ɵ3
            },
            bar: {
                backgroundColor: ɵ4,
                borderColor: ɵ5,
                hoverBackgroundColor: ɵ6,
                hoverBorderColor: ɵ7
            },
            get radar() {
                return this.line;
            },
            doughnut: {
                backgroundColor: ɵ8,
                borderColor: '#fff',
                hoverBackgroundColor: ɵ9,
                hoverBorderColor: ɵ10
            },
            get pie() {
                return this.doughnut;
            },
            polarArea: {
                backgroundColor: ɵ11,
                borderColor: ɵ12,
                hoverBackgroundColor: ɵ13,
                hoverBorderColor: ɵ14
            },
            get bubble() {
                return this.doughnut;
            },
            get scatter() {
                return this.doughnut;
            },
            get area() {
                return this.polarArea;
            }
        }
    };
    function rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function getRandomColor() {
        return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
     * Generate colors
     */
    function generateColor(index) {
        if (index === void 0) { index = 0; }
        return baseColors[index] || getRandomColor();
    }

    chart_js.Chart.register(chart_js.Title, chart_js.Tooltip, chart_js.Filler, chart_js.Legend, chart_js.LineController, chart_js.LineElement, chart_js.PointElement, chart_js.LinearScale, chart_js.CategoryScale, chart_js.BarController, chart_js.BarElement, chart_js.DoughnutController, chart_js.ArcElement, chart_js.RadarController, chart_js.RadialLinearScale, chart_js.PieController, chart_js.PolarAreaController, chart_js.BubbleController, chart_js.ScatterController, chart_js.TimeSeriesScale);
    var NgChartsModule = /** @class */ (function () {
        function NgChartsModule(config) {
            if (config === null || config === void 0 ? void 0 : config.plugins)
                chart_js.Chart.register(config === null || config === void 0 ? void 0 : config.plugins);
            var ngChartsDefaults = lodashEs.merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});
            chart_js.defaults.set(ngChartsDefaults);
        }
        NgChartsModule.forRoot = function (config) {
            return {
                ngModule: NgChartsModule,
                providers: [
                    { provide: NgChartsConfiguration, useValue: config }
                ]
            };
        };
        return NgChartsModule;
    }());
    NgChartsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    declarations: [BaseChartDirective],
                    exports: [BaseChartDirective]
                },] }
    ];
    NgChartsModule.ctorParameters = function () { return [
        { type: NgChartsConfiguration, decorators: [{ type: i0.Optional }] }
    ]; };
    var NgChartsConfiguration = /** @class */ (function () {
        function NgChartsConfiguration() {
        }
        return NgChartsConfiguration;
    }());
    NgChartsConfiguration.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function NgChartsConfiguration_Factory() { return new NgChartsConfiguration(); }, token: NgChartsConfiguration, providedIn: "root" });
    NgChartsConfiguration.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /*
     * Public API Surface of ng2-charts
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BaseChartDirective = BaseChartDirective;
    exports.NgChartsConfiguration = NgChartsConfiguration;
    exports.NgChartsModule = NgChartsModule;
    exports.ThemeService = ThemeService;
    exports.baseColors = baseColors;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng2-charts.umd.js.map
