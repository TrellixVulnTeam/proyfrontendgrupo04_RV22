import { baseColors } from './base-colors';
const ɵ0 = (context) => rgba(generateColor(context.datasetIndex), 0.4), ɵ1 = (context) => rgba(generateColor(context.datasetIndex), 1), ɵ2 = (context) => rgba(generateColor(context.datasetIndex), 1), ɵ3 = (context) => rgba(generateColor(context.datasetIndex), 0.8), ɵ4 = (context) => rgba(generateColor(context.datasetIndex), 0.6), ɵ5 = (context) => rgba(generateColor(context.datasetIndex), 1), ɵ6 = (context) => rgba(generateColor(context.datasetIndex), 0.8), ɵ7 = (context) => rgba(generateColor(context.datasetIndex), 1), ɵ8 = (context) => rgba(generateColor(context.dataIndex), 0.6), ɵ9 = (context) => rgba(generateColor(context.dataIndex), 1), ɵ10 = (context) => rgba(generateColor(context.dataIndex), 1), ɵ11 = (context) => rgba(generateColor(context.dataIndex), 0.6), ɵ12 = (context) => rgba(generateColor(context.dataIndex), 1), ɵ13 = (context) => rgba(generateColor(context.dataIndex), 0.8), ɵ14 = (context) => rgba(generateColor(context.dataIndex), 1);
export const builtInDefaults = {
    datasets: {
        line: {
            backgroundColor: ɵ0,
            borderColor: ɵ1,
            pointBackgroundColor: ɵ2,
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: ɵ3
        },
        bar: {
            backgroundColor: ɵ4,
            borderColor: ɵ5,
            hoverBackgroundColor: ɵ6,
            hoverBorderColor: ɵ7
        },
        get radar() {
            return this.line;
        },
        doughnut: {
            backgroundColor: ɵ8,
            borderColor: '#fff',
            hoverBackgroundColor: ɵ9,
            hoverBorderColor: ɵ10
        },
        get pie() {
            return this.doughnut;
        },
        polarArea: {
            backgroundColor: ɵ11,
            borderColor: ɵ12,
            hoverBackgroundColor: ɵ13,
            hoverBorderColor: ɵ14
        },
        get bubble() {
            return this.doughnut;
        },
        get scatter() {
            return this.doughnut;
        },
        get area() {
            return this.polarArea;
        }
    }
};
function rgba(colour, alpha) {
    return 'rgba(' + colour.concat(alpha).join(',') + ')';
}
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function getRandomColor() {
    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
}
/**
 * Generate colors
 */
function generateColor(index = 0) {
    return baseColors[index] || getRandomColor();
}
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWNvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jaGFydHMvc3JjL2xpYi9nZXQtY29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7V0FNcEIsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUNwRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQ3JELENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsT0FHN0QsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUd0RSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQ3BFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsT0FDckQsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUNwRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BTS9ELENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsT0FFeEQsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUMvRCxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBTTVELENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUMsUUFDakUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUNsRCxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDLFFBQ2pFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7QUFoQ25GLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRztJQUM3QixRQUFRLEVBQUU7UUFDUixJQUFJLEVBQUU7WUFDSixlQUFlLElBQWtFO1lBQ2pGLFdBQVcsSUFBZ0U7WUFDM0Usb0JBQW9CLElBQWdFO1lBQ3BGLGdCQUFnQixFQUFFLE1BQU07WUFDeEIseUJBQXlCLEVBQUUsTUFBTTtZQUNqQyxxQkFBcUIsSUFBa0U7U0FDeEY7UUFDRCxHQUFHLEVBQUU7WUFDSCxlQUFlLElBQWtFO1lBQ2pGLFdBQVcsSUFBZ0U7WUFDM0Usb0JBQW9CLElBQWtFO1lBQ3RGLGdCQUFnQixJQUFnRTtTQUNqRjtRQUNELElBQUksS0FBSztZQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsZUFBZSxJQUErRDtZQUM5RSxXQUFXLEVBQUUsTUFBTTtZQUNuQixvQkFBb0IsSUFBNkQ7WUFDakYsZ0JBQWdCLEtBQTZEO1NBQzlFO1FBQ0QsSUFBSSxHQUFHO1lBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxTQUFTLEVBQUU7WUFDVCxlQUFlLEtBQStEO1lBQzlFLFdBQVcsS0FBNkQ7WUFDeEUsb0JBQW9CLEtBQStEO1lBQ25GLGdCQUFnQixLQUE2RDtTQUM5RTtRQUNELElBQUksTUFBTTtZQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDO1FBQ0QsSUFBSSxPQUFPO1lBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxJQUFJLElBQUk7WUFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztLQUNGO0NBQ0YsQ0FBQztBQUVGLFNBQVMsSUFBSSxDQUFDLE1BQXFCLEVBQUUsS0FBYTtJQUNoRCxPQUFPLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDeEQsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEdBQVcsRUFBRSxHQUFXO0lBQzVDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLGNBQWM7SUFDckIsT0FBTyxDQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7QUFDOUUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxhQUFhLENBQUMsS0FBSyxHQUFHLENBQUM7SUFDOUIsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJhc2VDb2xvcnMgfSBmcm9tICcuL2Jhc2UtY29sb3JzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnY2hhcnQuanMnO1xuXG5leHBvcnQgY29uc3QgYnVpbHRJbkRlZmF1bHRzID0ge1xuICBkYXRhc2V0czoge1xuICAgIGxpbmU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKGNvbnRleHQ6IGFueSkgPT4gcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMC40KSxcbiAgICAgIGJvcmRlckNvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhc2V0SW5kZXgpLCAxKSxcbiAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhc2V0SW5kZXgpLCAxKSxcbiAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgIHBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogKGNvbnRleHQ6IGFueSkgPT4gcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMC44KVxuICAgIH0sXG4gICAgYmFyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFzZXRJbmRleCksIDAuNiksXG4gICAgICBib3JkZXJDb2xvcjogKGNvbnRleHQ6IGFueSkgPT4gcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMSksXG4gICAgICBob3ZlckJhY2tncm91bmRDb2xvcjogKGNvbnRleHQ6IGFueSkgPT4gcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMC44KSxcbiAgICAgIGhvdmVyQm9yZGVyQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFzZXRJbmRleCksIDEpXG4gICAgfSxcbiAgICBnZXQgcmFkYXIoKToge1trZXk6IHN0cmluZ106ICgoY29udGV4dDogYW55KSA9PiBDb2xvcikgfCBDb2xvciB9IHtcbiAgICAgIHJldHVybiB0aGlzLmxpbmU7XG4gICAgfSxcbiAgICBkb3VnaG51dDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAwLjYpLFxuICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgIGhvdmVyQmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAxKSxcbiAgICAgIGhvdmVyQm9yZGVyQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFJbmRleCksIDEpXG4gICAgfSxcbiAgICBnZXQgcGllKCk6IHtba2V5OiBzdHJpbmddOiAoKGNvbnRleHQ6IGFueSkgPT4gQ29sb3IpIHwgQ29sb3IgfSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3VnaG51dDtcbiAgICB9LFxuICAgIHBvbGFyQXJlYToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAwLjYpLFxuICAgICAgYm9yZGVyQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFJbmRleCksIDEpLFxuICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFJbmRleCksIDAuOCksXG4gICAgICBob3ZlckJvcmRlckNvbG9yOiAoY29udGV4dDogYW55KSA9PiByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAxKVxuICAgIH0sXG4gICAgZ2V0IGJ1YmJsZSgpOiB7W2tleTogc3RyaW5nXTogKChjb250ZXh0OiBhbnkpID0+IENvbG9yKSB8IENvbG9yIH0ge1xuICAgICAgcmV0dXJuIHRoaXMuZG91Z2hudXQ7XG4gICAgfSxcbiAgICBnZXQgc2NhdHRlcigpOiB7W2tleTogc3RyaW5nXTogKChjb250ZXh0OiBhbnkpID0+IENvbG9yKSB8IENvbG9yIH0ge1xuICAgICAgcmV0dXJuIHRoaXMuZG91Z2hudXQ7XG4gICAgfSxcbiAgICBnZXQgYXJlYSgpOiB7W2tleTogc3RyaW5nXTogKChjb250ZXh0OiBhbnkpID0+IENvbG9yKSB8IENvbG9yIH0ge1xuICAgICAgcmV0dXJuIHRoaXMucG9sYXJBcmVhO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gcmdiYShjb2xvdXI6IEFycmF5PG51bWJlcj4sIGFscGhhOiBudW1iZXIpOiBDb2xvciB7XG4gIHJldHVybiAncmdiYSgnICsgY29sb3VyLmNvbmNhdChhbHBoYSkuam9pbignLCcpICsgJyknO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUNvbG9yKCk6IG51bWJlcltdIHtcbiAgcmV0dXJuIFsgZ2V0UmFuZG9tSW50KDAsIDI1NSksIGdldFJhbmRvbUludCgwLCAyNTUpLCBnZXRSYW5kb21JbnQoMCwgMjU1KSBdO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGNvbG9yc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbG9yKGluZGV4ID0gMCk6IG51bWJlcltdIHtcbiAgcmV0dXJuIGJhc2VDb2xvcnNbaW5kZXhdIHx8IGdldFJhbmRvbUNvbG9yKCk7XG59XG4iXX0=