import { Injectable, NgModule, Optional } from '@angular/core';
import { BaseChartDirective } from './base-chart.directive';
import { ArcElement, BarController, BarElement, BubbleController, CategoryScale, Chart, defaults, DoughnutController, Filler, Legend, LinearScale, LineController, LineElement, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, ScatterController, TimeSeriesScale, Title, Tooltip } from 'chart.js';
import { merge } from "lodash-es";
import { builtInDefaults } from "./get-colors";
import * as i0 from "@angular/core";
Chart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);
export class NgChartsModule {
    constructor(config) {
        if (config === null || config === void 0 ? void 0 : config.plugins)
            Chart.register(config === null || config === void 0 ? void 0 : config.plugins);
        const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});
        defaults.set(ngChartsDefaults);
    }
    static forRoot(config) {
        return {
            ngModule: NgChartsModule,
            providers: [
                { provide: NgChartsConfiguration, useValue: config }
            ]
        };
    }
}
NgChartsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [BaseChartDirective],
                exports: [BaseChartDirective]
            },] }
];
NgChartsModule.ctorParameters = () => [
    { type: NgChartsConfiguration, decorators: [{ type: Optional }] }
];
export class NgChartsConfiguration {
}
NgChartsConfiguration.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartsConfiguration_Factory() { return new NgChartsConfiguration(); }, token: NgChartsConfiguration, providedIn: "root" });
NgChartsConfiguration.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jaGFydHMvc3JjL2xpYi9uZy1jaGFydHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUNMLFVBQVUsRUFDVixhQUFhLEVBQ2IsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixhQUFhLEVBQ2IsS0FBSyxFQUdMLFFBQVEsRUFDUixrQkFBa0IsRUFDbEIsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEVBQ1gsY0FBYyxFQUNkLFdBQVcsRUFDWCxhQUFhLEVBQ2IsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsS0FBSyxFQUNMLE9BQU8sRUFDUixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBRS9DLEtBQUssQ0FBQyxRQUFRLENBQ1osS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUM5QixjQUFjLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUNyRSxhQUFhLEVBQUUsVUFBVSxFQUN6QixrQkFBa0IsRUFBRSxVQUFVLEVBQzlCLGVBQWUsRUFBRSxpQkFBaUIsRUFDbEMsYUFBYSxFQUNiLG1CQUFtQixFQUNuQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGVBQWUsQ0FBQyxDQUFDO0FBT25CLE1BQU0sT0FBTyxjQUFjO0lBRXpCLFlBQXdCLE1BQThCO1FBQ3BELElBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE9BQU87WUFDakIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsT0FBTyxDQUFDLENBQUM7UUFFbEMsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFFBQVEsS0FBSSxFQUFFLENBQUMsQ0FBQztRQUV4RSxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBZ0U7UUFDcEYsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2FBQ3JEO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXZCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLENBQUUsa0JBQWtCLENBQUU7Z0JBQ3BDLE9BQU8sRUFBRSxDQUFFLGtCQUFrQixDQUFFO2FBQ2hDOzs7WUFHa0MscUJBQXFCLHVCQUF6QyxRQUFROztBQW9CdkIsTUFBTSxPQUFPLHFCQUFxQjs7OztZQURqQyxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlQ2hhcnREaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UtY2hhcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIEFyY0VsZW1lbnQsXG4gIEJhckNvbnRyb2xsZXIsXG4gIEJhckVsZW1lbnQsXG4gIEJ1YmJsZUNvbnRyb2xsZXIsXG4gIENhdGVnb3J5U2NhbGUsXG4gIENoYXJ0LFxuICBDaGFydENvbXBvbmVudExpa2UsXG4gIENoYXJ0Q29uZmlndXJhdGlvbixcbiAgZGVmYXVsdHMsXG4gIERvdWdobnV0Q29udHJvbGxlcixcbiAgRmlsbGVyLFxuICBMZWdlbmQsXG4gIExpbmVhclNjYWxlLFxuICBMaW5lQ29udHJvbGxlcixcbiAgTGluZUVsZW1lbnQsXG4gIFBpZUNvbnRyb2xsZXIsXG4gIFBvaW50RWxlbWVudCxcbiAgUG9sYXJBcmVhQ29udHJvbGxlcixcbiAgUmFkYXJDb250cm9sbGVyLFxuICBSYWRpYWxMaW5lYXJTY2FsZSxcbiAgU2NhdHRlckNvbnRyb2xsZXIsXG4gIFRpbWVTZXJpZXNTY2FsZSxcbiAgVGl0bGUsXG4gIFRvb2x0aXBcbn0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tIFwibG9kYXNoLWVzXCI7XG5pbXBvcnQgeyBidWlsdEluRGVmYXVsdHMgfSBmcm9tIFwiLi9nZXQtY29sb3JzXCI7XG5cbkNoYXJ0LnJlZ2lzdGVyKFxuICBUaXRsZSwgVG9vbHRpcCwgRmlsbGVyLCBMZWdlbmQsXG4gIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgUG9pbnRFbGVtZW50LCBMaW5lYXJTY2FsZSwgQ2F0ZWdvcnlTY2FsZSxcbiAgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCxcbiAgRG91Z2hudXRDb250cm9sbGVyLCBBcmNFbGVtZW50LFxuICBSYWRhckNvbnRyb2xsZXIsIFJhZGlhbExpbmVhclNjYWxlLFxuICBQaWVDb250cm9sbGVyLFxuICBQb2xhckFyZWFDb250cm9sbGVyLFxuICBCdWJibGVDb250cm9sbGVyLFxuICBTY2F0dGVyQ29udHJvbGxlcixcbiAgVGltZVNlcmllc1NjYWxlKTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW10sXG4gIGRlY2xhcmF0aW9uczogWyBCYXNlQ2hhcnREaXJlY3RpdmUgXSxcbiAgZXhwb3J0czogWyBCYXNlQ2hhcnREaXJlY3RpdmUgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0c01vZHVsZSB7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgY29uZmlnPzogTmdDaGFydHNDb25maWd1cmF0aW9uKSB7XG4gICAgaWYgKGNvbmZpZz8ucGx1Z2lucylcbiAgICAgIENoYXJ0LnJlZ2lzdGVyKGNvbmZpZz8ucGx1Z2lucyk7XG5cbiAgICBjb25zdCBuZ0NoYXJ0c0RlZmF1bHRzID0gbWVyZ2UoYnVpbHRJbkRlZmF1bHRzLCBjb25maWc/LmRlZmF1bHRzIHx8IHt9KTtcblxuICAgIGRlZmF1bHRzLnNldChuZ0NoYXJ0c0RlZmF1bHRzKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBQaWNrPENoYXJ0Q29uZmlndXJhdGlvbiwgJ3BsdWdpbnMnPiAmIHsgZGVmYXVsdHM6IGFueSB9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ0NoYXJ0c01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdDaGFydHNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24sIHVzZVZhbHVlOiBjb25maWcgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0c0NvbmZpZ3VyYXRpb24ge1xuICBwdWJsaWMgcGx1Z2lucz86IENoYXJ0Q29tcG9uZW50TGlrZTtcbiAgcHVibGljIGRlZmF1bHRzPzogYW55O1xufVxuIl19